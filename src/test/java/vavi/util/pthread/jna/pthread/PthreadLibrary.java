package vavi.util.pthread.jna.pthread;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>pthread</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface PthreadLibrary extends Library {
	String JNA_LIBRARY_NAME = "pthread";
	NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(PthreadLibrary.JNA_LIBRARY_NAME);
	PthreadLibrary INSTANCE = Native.load(PthreadLibrary.JNA_LIBRARY_NAME, PthreadLibrary.class);
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int _PTHREAD_MUTEX_SIG_init = 0x32AAABA7;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int _PTHREAD_ERRORCHECK_MUTEX_SIG_init = 0x32AAABA1;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int _PTHREAD_RECURSIVE_MUTEX_SIG_init = 0x32AAABA2;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int _PTHREAD_FIRSTFIT_MUTEX_SIG_init = 0x32AAABA3;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int _PTHREAD_COND_SIG_init = 0x3CB0B1BB;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int _PTHREAD_ONCE_SIG_init = 0x30B1BCBA;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int _PTHREAD_RWLOCK_SIG_init = 0x2DA8B3B4;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int SCHED_OTHER = 1;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int SCHED_FIFO = 4;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int SCHED_RR = 2;
	/** <i>native declaration : pthread/pthread_impl.h</i> */
	int __SCHED_PARAM_SIZE__ = 4;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_CREATE_JOINABLE = 1;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_CREATE_DETACHED = 2;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_INHERIT_SCHED = 1;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_EXPLICIT_SCHED = 2;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_CANCEL_ENABLE = 0x01;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_CANCEL_DISABLE = 0x00;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_CANCEL_DEFERRED = 0x02;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_CANCEL_ASYNCHRONOUS = 0x00;
	/*
	 * define<br>
	 * Conversion Error : ((void*)1)<br>
	 * SKIPPED:<br>
	 * <i>native declaration : pthread/pthread.h:0</i><br>
	 * ((void*)1)
	 */
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_SCOPE_SYSTEM = 1;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_SCOPE_PROCESS = 2;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_PROCESS_SHARED = 1;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_PROCESS_PRIVATE = 2;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_PRIO_NONE = 0;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_PRIO_INHERIT = 1;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_PRIO_PROTECT = 2;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_MUTEX_NORMAL = 0;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_MUTEX_ERRORCHECK = 1;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_MUTEX_RECURSIVE = 2;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_MUTEX_DEFAULT = 0;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = 1;
	/** <i>native declaration : pthread/pthread.h</i> */
	int PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = 3;
	/*
	 * define<br>
	 * Conversion Error : { 0x2DA8B3B4, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : pthread/pthread.h:0</i><br>
	 * { 0x2DA8B3B4, { 0 } }
	 */
	/*
	 * define<br>
	 * Conversion Error : { 0x32AAABA7, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : pthread/pthread.h:0</i><br>
	 * { 0x32AAABA7, { 0 } }
	 */
	/*
	 * define<br>
	 * Conversion Error : { 0x3CB0B1BB, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : pthread/pthread.h:0</i><br>
	 * { 0x3CB0B1BB, { 0 } }
	 */
	/*
	 * define<br>
	 * Conversion Error : { 0x30B1BCBA, { 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : pthread/pthread.h:0</i><br>
	 * { 0x30B1BCBA, { 0 } }
	 */
	/** <i>native declaration : pthread/pthread.h</i> */
    interface pthread_jit_write_callback_t extends Callback {
		int apply(Pointer ctx);
	}

    /** <i>native declaration : pthread/pthread.h:0</i> */
    interface pthread_atfork_arg1_callback extends Callback {
		void apply();
	}

    /** <i>native declaration : pthread/pthread.h:0</i> */
    interface pthread_atfork_arg2_callback extends Callback {
		void apply();
	}

    /** <i>native declaration : pthread/pthread.h:0</i> */
    interface pthread_atfork_arg3_callback extends Callback {
		void apply();
	}

    /** <i>native declaration : pthread/pthread.h:0</i> */
    interface pthread_create_arg1_callback extends Callback {
		Pointer apply(Pointer voidPtr1);
	}

    /** <i>native declaration : pthread/pthread.h:0</i> */
    interface pthread_key_create_arg1_callback extends Callback {
		void apply(Pointer voidPtr1);
	}

    /** <i>native declaration : pthread/pthread.h:0</i> */
    interface pthread_once_arg1_callback extends Callback {
		void apply();
	}

    /** <i>native declaration : pthread/pthread.h:0</i> */
    interface pthread_create_suspended_np_arg1_callback extends Callback {
		Pointer apply(Pointer voidPtr1);
	}

    /**
	 * Original signature : <code>int sched_yield()</code><br>
	 * <i>native declaration : pthread/sched.h:39</i>
	 */
	int sched_yield();
	/**
	 * Original signature : <code>int sched_get_priority_min(int)</code><br>
	 * <i>native declaration : pthread/sched.h:40</i>
	 */
	int sched_get_priority_min(int int1);
	/**
	 * Original signature : <code>int sched_get_priority_max(int)</code><br>
	 * <i>native declaration : pthread/sched.h:41</i>
	 */
	int sched_get_priority_max(int int1);
	/**
	 * @function pthread_attr_set_qos_class_np<br>
	 * @abstract<br>
	 * Sets the QOS class and relative priority of a pthread attribute structure<br>
	 * which may be used to specify the requested QOS class of newly created<br>
	 * threads.<br>
	 * @discussion<br>
	 * The QOS class and relative priority represent an overall combination of<br>
	 * system quality of service attributes on a thread.<br>
	 * Subsequent calls to interfaces such as pthread_attr_setschedparam() that are<br>
	 * incompatible or in conflict with the QOS class system will unset the QOS<br>
	 * class requested with this interface and pthread_attr_get_qos_class_np() will<br>
	 * return QOS_CLASS_UNSPECIFIED.<br>
	 * @param __attr<br>
	 * The pthread attribute structure to modify.<br>
	 * @param __qos_class<br>
	 * A QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * EINVAL will be returned if any other value is provided.<br>
	 * @param __relative_priority<br>
	 * A relative priority within the QOS class. This value is a negative offset<br>
	 * from the maximum supported scheduler priority for the given class.<br>
	 * EINVAL will be returned if the value is greater than zero or less than<br>
	 * QOS_MIN_RELATIVE_PRIORITY.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_attr_set_qos_class_np(pthread_attr_t*, qos_class_t, int)</code><br>
	 * <i>native declaration : pthread/qos.h:80</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_set_qos_class_np(com.sun.jna.ptr.PointerByReference, int, int)} instead
	 */
	@Deprecated 
	int pthread_attr_set_qos_class_np(Pointer __attr, int __qos_class, int __relative_priority);
	/**
	 * @function pthread_attr_set_qos_class_np<br>
	 * @abstract<br>
	 * Sets the QOS class and relative priority of a pthread attribute structure<br>
	 * which may be used to specify the requested QOS class of newly created<br>
	 * threads.<br>
	 * @discussion<br>
	 * The QOS class and relative priority represent an overall combination of<br>
	 * system quality of service attributes on a thread.<br>
	 * Subsequent calls to interfaces such as pthread_attr_setschedparam() that are<br>
	 * incompatible or in conflict with the QOS class system will unset the QOS<br>
	 * class requested with this interface and pthread_attr_get_qos_class_np() will<br>
	 * return QOS_CLASS_UNSPECIFIED.<br>
	 * @param __attr<br>
	 * The pthread attribute structure to modify.<br>
	 * @param __qos_class<br>
	 * A QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * EINVAL will be returned if any other value is provided.<br>
	 * @param __relative_priority<br>
	 * A relative priority within the QOS class. This value is a negative offset<br>
	 * from the maximum supported scheduler priority for the given class.<br>
	 * EINVAL will be returned if the value is greater than zero or less than<br>
	 * QOS_MIN_RELATIVE_PRIORITY.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_attr_set_qos_class_np(pthread_attr_t*, qos_class_t, int)</code><br>
	 * <i>native declaration : pthread/qos.h:80</i>
	 */
	int pthread_attr_set_qos_class_np(PointerByReference __attr, int __qos_class, int __relative_priority);
	/**
	 * @function pthread_attr_get_qos_class_np<br>
	 * @abstract<br>
	 * Gets the QOS class and relative priority of a pthread attribute structure.<br>
	 * @param __attr<br>
	 * The pthread attribute structure to inspect.<br>
	 * @param __qos_class<br>
	 * On output, a QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * - QOS_CLASS_UNSPECIFIED<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @param __relative_priority<br>
	 * On output, a relative priority offset within the QOS class.<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_attr_get_qos_class_np(pthread_attr_t*, qos_class_t*, int*)</code><br>
	 * <i>native declaration : pthread/qos.h:111</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_get_qos_class_np(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #pthread_attr_get_qos_class_np(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_get_qos_class_np(Pointer __attr, IntByReference __qos_class, IntByReference __relative_priority);
	/**
	 * @function pthread_attr_get_qos_class_np<br>
	 * @abstract<br>
	 * Gets the QOS class and relative priority of a pthread attribute structure.<br>
	 * @param __attr<br>
	 * The pthread attribute structure to inspect.<br>
	 * @param __qos_class<br>
	 * On output, a QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * - QOS_CLASS_UNSPECIFIED<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @param __relative_priority<br>
	 * On output, a relative priority offset within the QOS class.<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_attr_get_qos_class_np(pthread_attr_t*, qos_class_t*, int*)</code><br>
	 * <i>native declaration : pthread/qos.h:111</i>
	 */
	int pthread_attr_get_qos_class_np(PointerByReference __attr, IntBuffer __qos_class, IntBuffer __relative_priority);
	/**
	 * @function pthread_attr_get_qos_class_np<br>
	 * @abstract<br>
	 * Gets the QOS class and relative priority of a pthread attribute structure.<br>
	 * @param __attr<br>
	 * The pthread attribute structure to inspect.<br>
	 * @param __qos_class<br>
	 * On output, a QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * - QOS_CLASS_UNSPECIFIED<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @param __relative_priority<br>
	 * On output, a relative priority offset within the QOS class.<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_attr_get_qos_class_np(pthread_attr_t*, qos_class_t*, int*)</code><br>
	 * <i>native declaration : pthread/qos.h:111</i>
	 */
	int pthread_attr_get_qos_class_np(PointerByReference __attr, IntByReference __qos_class, IntByReference __relative_priority);
	/**
	 * @function pthread_set_qos_class_self_np<br>
	 * @abstract<br>
	 * Sets the requested QOS class and relative priority of the current thread.<br>
	 * @discussion<br>
	 * The QOS class and relative priority represent an overall combination of<br>
	 * system quality of service attributes on a thread.<br>
	 * Subsequent calls to interfaces such as pthread_setschedparam() that are<br>
	 * incompatible or in conflict with the QOS class system will unset the QOS<br>
	 * class requested with this interface and pthread_get_qos_class_np() will<br>
	 * return QOS_CLASS_UNSPECIFIED thereafter. A thread so modified is permanently<br>
	 * opted-out of the QOS class system and calls to this function to request a QOS<br>
	 * class for such a thread will fail and return EPERM.<br>
	 * @param __qos_class<br>
	 * A QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * EINVAL will be returned if any other value is provided.<br>
	 * @param __relative_priority<br>
	 * A relative priority within the QOS class. This value is a negative offset<br>
	 * from the maximum supported scheduler priority for the given class.<br>
	 * EINVAL will be returned if the value is greater than zero or less than<br>
	 * QOS_MIN_RELATIVE_PRIORITY.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_set_qos_class_self_np(qos_class_t, int)</code><br>
	 * <i>native declaration : pthread/qos.h:152</i>
	 */
	int pthread_set_qos_class_self_np(int __qos_class, int __relative_priority);
	/**
	 * @function pthread_get_qos_class_np<br>
	 * @abstract<br>
	 * Gets the requested QOS class and relative priority of a thread.<br>
	 * @param __pthread<br>
	 * The target thread to inspect.<br>
	 * @param __qos_class<br>
	 * On output, a QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * - QOS_CLASS_UNSPECIFIED<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @param __relative_priority<br>
	 * On output, a relative priority offset within the QOS class.<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_get_qos_class_np(pthread_t, qos_class_t*, int*)</code><br>
	 * <i>native declaration : pthread/qos.h:183</i><br>
	 * @deprecated use the safer methods {@link #pthread_get_qos_class_np(vavi.util.pthread.jna.pthread.PthreadLibrary.pthread_t, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #pthread_get_qos_class_np(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_get_qos_class_np(Pointer __pthread, IntByReference __qos_class, IntByReference __relative_priority);
	/**
	 * @function pthread_get_qos_class_np<br>
	 * @abstract<br>
	 * Gets the requested QOS class and relative priority of a thread.<br>
	 * @param __pthread<br>
	 * The target thread to inspect.<br>
	 * @param __qos_class<br>
	 * On output, a QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * - QOS_CLASS_UNSPECIFIED<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @param __relative_priority<br>
	 * On output, a relative priority offset within the QOS class.<br>
	 * This value may be NULL in which case no value is returned.<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_get_qos_class_np(pthread_t, qos_class_t*, int*)</code><br>
	 * <i>native declaration : pthread/qos.h:183</i>
	 */
	int pthread_get_qos_class_np(PthreadLibrary.pthread_t __pthread, IntBuffer __qos_class, IntBuffer __relative_priority);
	/**
	 * @function pthread_override_qos_class_start_np<br>
	 * @abstract<br>
	 * Starts a QOS class override of the specified target thread.<br>
	 * @discussion<br>
	 * Starting a QOS class override of the specified target thread expresses that<br>
	 * an item of pending work classified with the specified QOS class and relative<br>
	 * priority depends on the completion of the work currently being executed by<br>
	 * the thread (e.g. due to ordering requirements).<br>
	 * While overrides are in effect, the specified target thread will execute at<br>
	 * the maximum QOS class and relative priority of all overrides and of the QOS<br>
	 * class requested by the thread itself.<br>
	 * Starting a QOS class override does not modify the target thread's requested<br>
	 * QOS class value and the effect of an override is not visible to the<br>
	 * qos_class_self() and pthread_get_qos_class_np() interfaces.<br>
	 * The returned newly allocated override object is intended to be associated<br>
	 * with the item of pending work in question. Once the dependency has been<br>
	 * satisfied and enabled that work to begin executing, the QOS class override<br>
	 * must be ended by passing the associated override object to<br>
	 * pthread_override_qos_class_end_np(). Failure to do so will result in the<br>
	 * associated resources to be leaked and the target thread to be permanently<br>
	 * executed at an inappropriately elevated QOS class.<br>
	 * @param __pthread<br>
	 * The target thread to modify.<br>
	 * @param __qos_class<br>
	 * A QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * NULL will be returned if any other value is provided.<br>
	 * @param __relative_priority<br>
	 * A relative priority within the QOS class. This value is a negative offset<br>
	 * from the maximum supported scheduler priority for the given class.<br>
	 * NULL will be returned if the value is greater than zero or less than<br>
	 * QOS_MIN_RELATIVE_PRIORITY.<br>
	 * @return<br>
	 * A newly allocated override object if successful, or NULL if the override<br>
	 * could not be started.<br>
	 * Original signature : <code>pthread_override_t pthread_override_qos_class_start_np(pthread_t, qos_class_t, int)</code><br>
	 * <i>native declaration : pthread/qos.h:262</i><br>
	 * @deprecated use the safer methods {@link #pthread_override_qos_class_start_np(vavi.util.pthread.jna.pthread.PthreadLibrary.pthread_t, int, int)} and {@link #pthread_override_qos_class_start_np(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	PthreadLibrary.pthread_override_t pthread_override_qos_class_start_np(Pointer __pthread, int __qos_class, int __relative_priority);
	/**
	 * @function pthread_override_qos_class_start_np<br>
	 * @abstract<br>
	 * Starts a QOS class override of the specified target thread.<br>
	 * @discussion<br>
	 * Starting a QOS class override of the specified target thread expresses that<br>
	 * an item of pending work classified with the specified QOS class and relative<br>
	 * priority depends on the completion of the work currently being executed by<br>
	 * the thread (e.g. due to ordering requirements).<br>
	 * While overrides are in effect, the specified target thread will execute at<br>
	 * the maximum QOS class and relative priority of all overrides and of the QOS<br>
	 * class requested by the thread itself.<br>
	 * Starting a QOS class override does not modify the target thread's requested<br>
	 * QOS class value and the effect of an override is not visible to the<br>
	 * qos_class_self() and pthread_get_qos_class_np() interfaces.<br>
	 * The returned newly allocated override object is intended to be associated<br>
	 * with the item of pending work in question. Once the dependency has been<br>
	 * satisfied and enabled that work to begin executing, the QOS class override<br>
	 * must be ended by passing the associated override object to<br>
	 * pthread_override_qos_class_end_np(). Failure to do so will result in the<br>
	 * associated resources to be leaked and the target thread to be permanently<br>
	 * executed at an inappropriately elevated QOS class.<br>
	 * @param __pthread<br>
	 * The target thread to modify.<br>
	 * @param __qos_class<br>
	 * A QOS class value:<br>
	 * - QOS_CLASS_USER_INTERACTIVE<br>
	 * - QOS_CLASS_USER_INITIATED<br>
	 * - QOS_CLASS_DEFAULT<br>
	 * - QOS_CLASS_UTILITY<br>
	 * - QOS_CLASS_BACKGROUND<br>
	 * NULL will be returned if any other value is provided.<br>
	 * @param __relative_priority<br>
	 * A relative priority within the QOS class. This value is a negative offset<br>
	 * from the maximum supported scheduler priority for the given class.<br>
	 * NULL will be returned if the value is greater than zero or less than<br>
	 * QOS_MIN_RELATIVE_PRIORITY.<br>
	 * @return<br>
	 * A newly allocated override object if successful, or NULL if the override<br>
	 * could not be started.<br>
	 * Original signature : <code>pthread_override_t pthread_override_qos_class_start_np(pthread_t, qos_class_t, int)</code><br>
	 * <i>native declaration : pthread/qos.h:262</i>
	 */
	PthreadLibrary.pthread_override_t pthread_override_qos_class_start_np(PthreadLibrary.pthread_t __pthread, int __qos_class, int __relative_priority);
	/**
	 * @function pthread_override_qos_class_end_np<br>
	 * @abstract<br>
	 * Ends a QOS class override.<br>
	 * @discussion<br>
	 * Passing an override object returned by pthread_override_qos_class_start_np()<br>
	 * ends the QOS class override started by that call and deallocates all<br>
	 * associated resources as well as the override object itself.<br>
	 * The thread starting and the thread ending a QOS class override need not be<br>
	 * identical. If the thread ending the override is the target thread of the<br>
	 * override itself, it should take care to elevate its requested QOS class<br>
	 * appropriately with pthread_set_qos_class_self_np() before ending the<br>
	 * override.<br>
	 * @param __override<br>
	 * An override object returned by pthread_override_qos_class_start_np().<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_override_qos_class_end_np(pthread_override_t)</code><br>
	 * <i>native declaration : pthread/qos.h:290</i><br>
	 * @deprecated use the safer methods {@link #pthread_override_qos_class_end_np(vavi.util.pthread.jna.pthread.PthreadLibrary.pthread_override_t)} and {@link #pthread_override_qos_class_end_np(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pthread_override_qos_class_end_np(Pointer __override);
	/**
	 * @function pthread_override_qos_class_end_np<br>
	 * @abstract<br>
	 * Ends a QOS class override.<br>
	 * @discussion<br>
	 * Passing an override object returned by pthread_override_qos_class_start_np()<br>
	 * ends the QOS class override started by that call and deallocates all<br>
	 * associated resources as well as the override object itself.<br>
	 * The thread starting and the thread ending a QOS class override need not be<br>
	 * identical. If the thread ending the override is the target thread of the<br>
	 * override itself, it should take care to elevate its requested QOS class<br>
	 * appropriately with pthread_set_qos_class_self_np() before ending the<br>
	 * override.<br>
	 * @param __override<br>
	 * An override object returned by pthread_override_qos_class_start_np().<br>
	 * @return<br>
	 * Zero if successful, otherwise an errno value.<br>
	 * Original signature : <code>int pthread_override_qos_class_end_np(pthread_override_t)</code><br>
	 * <i>native declaration : pthread/qos.h:290</i>
	 */
	int pthread_override_qos_class_end_np(PthreadLibrary.pthread_override_t __override);
	/**
	 * Prototypes for all PTHREAD interfaces<br>
	 * Original signature : <code>int pthread_atfork(pthread_atfork_arg1_callback*, pthread_atfork_arg2_callback*, pthread_atfork_arg3_callback*)</code><br>
	 * <i>native declaration : pthread/pthread.h:126</i>
	 */
	int pthread_atfork(PthreadLibrary.pthread_atfork_arg1_callback arg1, PthreadLibrary.pthread_atfork_arg2_callback arg2, PthreadLibrary.pthread_atfork_arg3_callback arg3);
	/**
	 * Original signature : <code>int pthread_attr_destroy(pthread_attr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:130</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_destroy(Pointer pthread_attr_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_destroy(pthread_attr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:130</i>
	 */
	int pthread_attr_destroy(PointerByReference pthread_attr_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getdetachstate(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:133</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getdetachstate(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_attr_getdetachstate(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getdetachstate(Pointer pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getdetachstate(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:133</i>
	 */
	int pthread_attr_getdetachstate(PointerByReference pthread_attr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getdetachstate(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:133</i>
	 */
	int pthread_attr_getdetachstate(PointerByReference pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getguardsize(const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:136</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_getguardsize(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getguardsize(Pointer pthread_attr_tPtr1, NativeLongByReference size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getguardsize(const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:136</i>
	 */
	int pthread_attr_getguardsize(PointerByReference pthread_attr_tPtr1, NativeLongByReference size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getinheritsched(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:139</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getinheritsched(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_attr_getinheritsched(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getinheritsched(Pointer pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getinheritsched(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:139</i>
	 */
	int pthread_attr_getinheritsched(PointerByReference pthread_attr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getinheritsched(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:139</i>
	 */
	int pthread_attr_getinheritsched(PointerByReference pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getschedparam(const pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : pthread/pthread.h:142</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_getschedparam(com.sun.jna.ptr.PointerByReference, vavi.util.pthread.jna.pthread.sched_param)} instead
	 */
	@Deprecated 
	int pthread_attr_getschedparam(Pointer pthread_attr_tPtr1, sched_param sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getschedparam(const pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : pthread/pthread.h:142</i>
	 */
	int pthread_attr_getschedparam(PointerByReference pthread_attr_tPtr1, sched_param sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getschedpolicy(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:146</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getschedpolicy(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_attr_getschedpolicy(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getschedpolicy(Pointer pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getschedpolicy(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:146</i>
	 */
	int pthread_attr_getschedpolicy(PointerByReference pthread_attr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getschedpolicy(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:146</i>
	 */
	int pthread_attr_getschedpolicy(PointerByReference pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getscope(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:149</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getscope(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_attr_getscope(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getscope(Pointer pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getscope(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:149</i>
	 */
	int pthread_attr_getscope(PointerByReference pthread_attr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getscope(const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:149</i>
	 */
	int pthread_attr_getscope(PointerByReference pthread_attr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstack(const pthread_attr_t*, void**, size_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:152</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_getstack(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getstack(Pointer pthread_attr_tPtr1, PointerByReference voidPtrPtr1, NativeLongByReference size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstack(const pthread_attr_t*, void**, size_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:152</i>
	 */
	int pthread_attr_getstack(PointerByReference pthread_attr_tPtr1, PointerByReference voidPtrPtr1, NativeLongByReference size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstackaddr(const pthread_attr_t*, void**)</code><br>
	 * <i>native declaration : pthread/pthread.h:156</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_getstackaddr(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getstackaddr(Pointer pthread_attr_tPtr1, PointerByReference voidPtrPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstackaddr(const pthread_attr_t*, void**)</code><br>
	 * <i>native declaration : pthread/pthread.h:156</i>
	 */
	int pthread_attr_getstackaddr(PointerByReference pthread_attr_tPtr1, PointerByReference voidPtrPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstacksize(const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:160</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_getstacksize(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getstacksize(Pointer pthread_attr_tPtr1, NativeLongByReference size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_getstacksize(const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:160</i>
	 */
	int pthread_attr_getstacksize(PointerByReference pthread_attr_tPtr1, NativeLongByReference size_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_init(pthread_attr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:163</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_init(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_init(Pointer pthread_attr_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_init(pthread_attr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:163</i>
	 */
	int pthread_attr_init(PointerByReference pthread_attr_tPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setdetachstate(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:166</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setdetachstate(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_attr_setdetachstate(Pointer pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setdetachstate(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:166</i>
	 */
	int pthread_attr_setdetachstate(PointerByReference pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setguardsize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:169</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setguardsize(com.sun.jna.ptr.PointerByReference, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int pthread_attr_setguardsize(Pointer pthread_attr_tPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>int pthread_attr_setguardsize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:169</i>
	 */
	int pthread_attr_setguardsize(PointerByReference pthread_attr_tPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>int pthread_attr_setinheritsched(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:172</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setinheritsched(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_attr_setinheritsched(Pointer pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setinheritsched(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:172</i>
	 */
	int pthread_attr_setinheritsched(PointerByReference pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setschedparam(pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : pthread/pthread.h:175</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setschedparam(com.sun.jna.ptr.PointerByReference, vavi.util.pthread.jna.pthread.sched_param)} instead
	 */
	@Deprecated 
	int pthread_attr_setschedparam(Pointer pthread_attr_tPtr1, sched_param sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setschedparam(pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : pthread/pthread.h:175</i>
	 */
	int pthread_attr_setschedparam(PointerByReference pthread_attr_tPtr1, sched_param sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setschedpolicy(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:179</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setschedpolicy(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_attr_setschedpolicy(Pointer pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setschedpolicy(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:179</i>
	 */
	int pthread_attr_setschedpolicy(PointerByReference pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setscope(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:182</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setscope(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_attr_setscope(Pointer pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setscope(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:182</i>
	 */
	int pthread_attr_setscope(PointerByReference pthread_attr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_attr_setstack(pthread_attr_t*, void*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:185</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setstack(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int pthread_attr_setstack(Pointer pthread_attr_tPtr1, Pointer voidPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>int pthread_attr_setstack(pthread_attr_t*, void*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:185</i>
	 */
	int pthread_attr_setstack(PointerByReference pthread_attr_tPtr1, Pointer voidPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>int pthread_attr_setstackaddr(pthread_attr_t*, void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:188</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setstackaddr(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pthread_attr_setstackaddr(Pointer pthread_attr_tPtr1, Pointer voidPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setstackaddr(pthread_attr_t*, void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:188</i>
	 */
	int pthread_attr_setstackaddr(PointerByReference pthread_attr_tPtr1, Pointer voidPtr1);
	/**
	 * Original signature : <code>int pthread_attr_setstacksize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:191</i><br>
	 * @deprecated use the safer method {@link #pthread_attr_setstacksize(com.sun.jna.ptr.PointerByReference, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int pthread_attr_setstacksize(Pointer pthread_attr_tPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>int pthread_attr_setstacksize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:191</i>
	 */
	int pthread_attr_setstacksize(PointerByReference pthread_attr_tPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>int pthread_cancel()</code><br>
	 * <i>native declaration : pthread/pthread.h:194</i>
	 */
	int pthread_cancel();
	/**
	 * Original signature : <code>int pthread_cond_broadcast(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:197</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_broadcast(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_cond_broadcast(Pointer pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_broadcast(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:197</i>
	 */
	int pthread_cond_broadcast(PointerByReference pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_destroy(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:200</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_cond_destroy(Pointer pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_destroy(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:200</i>
	 */
	int pthread_cond_destroy(PointerByReference pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_init(pthread_cond_t*, const pthread_condattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:203</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_init(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_cond_init(Pointer pthread_cond_tPtr1, Pointer pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_init(pthread_cond_t*, const pthread_condattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:203</i>
	 */
	int pthread_cond_init(PointerByReference pthread_cond_tPtr1, PointerByReference pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_signal(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:209</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_signal(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_cond_signal(Pointer pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_signal(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:209</i>
	 */
	int pthread_cond_signal(PointerByReference pthread_cond_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : pthread/pthread.h:213</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_timedwait(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, vavi.util.pthread.jna.pthread.PthreadLibrary.timespec)} instead
	 */
	@Deprecated 
	int pthread_cond_timedwait(Pointer pthread_cond_tPtr1, Pointer pthread_mutex_tPtr1, PthreadLibrary.timespec timespecPtr1);
	/**
	 * Original signature : <code>int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : pthread/pthread.h:213</i>
	 */
	int pthread_cond_timedwait(PointerByReference pthread_cond_tPtr1, PointerByReference pthread_mutex_tPtr1, PthreadLibrary.timespec timespecPtr1);
	/**
	 * Original signature : <code>int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:220</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_wait(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_cond_wait(Pointer pthread_cond_tPtr1, Pointer pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:220</i>
	 */
	int pthread_cond_wait(PointerByReference pthread_cond_tPtr1, PointerByReference pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_destroy(pthread_condattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:224</i><br>
	 * @deprecated use the safer method {@link #pthread_condattr_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_condattr_destroy(Pointer pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_destroy(pthread_condattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:224</i>
	 */
	int pthread_condattr_destroy(PointerByReference pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_init(pthread_condattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:227</i><br>
	 * @deprecated use the safer method {@link #pthread_condattr_init(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_condattr_init(Pointer pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_init(pthread_condattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:227</i>
	 */
	int pthread_condattr_init(PointerByReference pthread_condattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_getpshared(const pthread_condattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:230</i><br>
	 * @deprecated use the safer methods {@link #pthread_condattr_getpshared(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_condattr_getpshared(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_condattr_getpshared(Pointer pthread_condattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_getpshared(const pthread_condattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:230</i>
	 */
	int pthread_condattr_getpshared(PointerByReference pthread_condattr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_getpshared(const pthread_condattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:230</i>
	 */
	int pthread_condattr_getpshared(PointerByReference pthread_condattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_condattr_setpshared(pthread_condattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:234</i><br>
	 * @deprecated use the safer method {@link #pthread_condattr_setpshared(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_condattr_setpshared(Pointer pthread_condattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_condattr_setpshared(pthread_condattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:234</i>
	 */
	int pthread_condattr_setpshared(PointerByReference pthread_condattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_create(pthread_t*, const pthread_attr_t*, pthread_create_arg1_callback*, void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:238</i><br>
	 * @deprecated use the safer method {@link #pthread_create(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, vavi.util.pthread.jna.pthread.PthreadLibrary.pthread_create_arg1_callback, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pthread_create(Pointer pthread_tPtr1, Pointer pthread_attr_tPtr1, PthreadLibrary.pthread_create_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Original signature : <code>int pthread_create(pthread_t*, const pthread_attr_t*, pthread_create_arg1_callback*, void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:238</i>
	 */
	int pthread_create(PointerByReference pthread_tPtr1, PointerByReference pthread_attr_tPtr1, PthreadLibrary.pthread_create_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Original signature : <code>int pthread_detach()</code><br>
	 * <i>native declaration : pthread/pthread.h:249</i>
	 */
	int pthread_detach();
	/**
	 * Original signature : <code>int pthread_equal()</code><br>
	 * <i>native declaration : pthread/pthread.h:252</i>
	 */
	int pthread_equal();
	/**
	 * Original signature : <code>void pthread_exit(void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:256</i>
	 */
	void pthread_exit(Pointer voidPtr1);
	/**
	 * Original signature : <code>int pthread_getconcurrency()</code><br>
	 * <i>native declaration : pthread/pthread.h:259</i>
	 */
	int pthread_getconcurrency();
	/**
	 * Original signature : <code>int pthread_getschedparam(int*, sched_param*)</code><br>
	 * <i>native declaration : pthread/pthread.h:262</i><br>
	 * @deprecated use the safer methods {@link #pthread_getschedparam(java.nio.IntBuffer, vavi.util.pthread.jna.pthread.sched_param)} and {@link #pthread_getschedparam(com.sun.jna.ptr.IntByReference, vavi.util.pthread.jna.pthread.sched_param)} instead
	 */
	@Deprecated 
	int pthread_getschedparam(IntByReference intPtr1, sched_param sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_getschedparam(int*, sched_param*)</code><br>
	 * <i>native declaration : pthread/pthread.h:262</i>
	 */
	int pthread_getschedparam(IntBuffer intPtr1, sched_param sched_paramPtr1);
	/**
	 * Original signature : <code>void* pthread_getspecific()</code><br>
	 * <i>native declaration : pthread/pthread.h:267</i>
	 */
	Pointer pthread_getspecific();
	/**
	 * Original signature : <code>int pthread_join(void**)</code><br>
	 * <i>native declaration : pthread/pthread.h:271</i>
	 */
	int pthread_join(PointerByReference voidPtrPtr1);
	/**
	 * Original signature : <code>int pthread_key_create(pthread_key_t*, pthread_key_create_arg1_callback*)</code><br>
	 * <i>native declaration : pthread/pthread.h:275</i>
	 */
	int pthread_key_create(NativeLongByReference pthread_key_tPtr1, PthreadLibrary.pthread_key_create_arg1_callback arg1);
	/**
	 * Original signature : <code>int pthread_key_delete()</code><br>
	 * <i>native declaration : pthread/pthread.h:278</i>
	 */
	int pthread_key_delete();
	/**
	 * Original signature : <code>int pthread_mutex_destroy(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:281</i><br>
	 * @deprecated use the safer method {@link #pthread_mutex_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_destroy(Pointer pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_destroy(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:281</i>
	 */
	int pthread_mutex_destroy(PointerByReference pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_getprioceiling(const pthread_mutex_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:284</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutex_getprioceiling(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_mutex_getprioceiling(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_getprioceiling(Pointer pthread_mutex_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_getprioceiling(const pthread_mutex_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:284</i>
	 */
	int pthread_mutex_getprioceiling(PointerByReference pthread_mutex_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_getprioceiling(const pthread_mutex_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:284</i>
	 */
	int pthread_mutex_getprioceiling(PointerByReference pthread_mutex_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_init(pthread_mutex_t*, const pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:288</i><br>
	 * @deprecated use the safer method {@link #pthread_mutex_init(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_init(Pointer pthread_mutex_tPtr1, Pointer pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_init(pthread_mutex_t*, const pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:288</i>
	 */
	int pthread_mutex_init(PointerByReference pthread_mutex_tPtr1, PointerByReference pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_lock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:293</i><br>
	 * @deprecated use the safer method {@link #pthread_mutex_lock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_lock(Pointer pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_lock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:293</i>
	 */
	int pthread_mutex_lock(PointerByReference pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:296</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutex_setprioceiling(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer)} and {@link #pthread_mutex_setprioceiling(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_setprioceiling(Pointer pthread_mutex_tPtr1, int int1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:296</i>
	 */
	int pthread_mutex_setprioceiling(PointerByReference pthread_mutex_tPtr1, int int1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:296</i>
	 */
	int pthread_mutex_setprioceiling(PointerByReference pthread_mutex_tPtr1, int int1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_trylock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:301</i><br>
	 * @deprecated use the safer method {@link #pthread_mutex_trylock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_trylock(Pointer pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_trylock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:301</i>
	 */
	int pthread_mutex_trylock(PointerByReference pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_unlock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:305</i><br>
	 * @deprecated use the safer method {@link #pthread_mutex_unlock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_unlock(Pointer pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutex_unlock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:305</i>
	 */
	int pthread_mutex_unlock(PointerByReference pthread_mutex_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_destroy(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:308</i><br>
	 * @deprecated use the safer method {@link #pthread_mutexattr_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_destroy(Pointer pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_destroy(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:308</i>
	 */
	int pthread_mutexattr_destroy(PointerByReference pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:311</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getprioceiling(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getprioceiling(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getprioceiling(Pointer pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:311</i>
	 */
	int pthread_mutexattr_getprioceiling(PointerByReference pthread_mutexattr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:311</i>
	 */
	int pthread_mutexattr_getprioceiling(PointerByReference pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprotocol(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:315</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getprotocol(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getprotocol(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getprotocol(Pointer pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprotocol(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:315</i>
	 */
	int pthread_mutexattr_getprotocol(PointerByReference pthread_mutexattr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getprotocol(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:315</i>
	 */
	int pthread_mutexattr_getprotocol(PointerByReference pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getpshared(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:319</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getpshared(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getpshared(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getpshared(Pointer pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getpshared(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:319</i>
	 */
	int pthread_mutexattr_getpshared(PointerByReference pthread_mutexattr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getpshared(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:319</i>
	 */
	int pthread_mutexattr_getpshared(PointerByReference pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_gettype(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:323</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_gettype(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_mutexattr_gettype(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_gettype(Pointer pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_gettype(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:323</i>
	 */
	int pthread_mutexattr_gettype(PointerByReference pthread_mutexattr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_gettype(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:323</i>
	 */
	int pthread_mutexattr_gettype(PointerByReference pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getpolicy_np(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:327</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getpolicy_np(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getpolicy_np(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getpolicy_np(Pointer pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getpolicy_np(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:327</i>
	 */
	int pthread_mutexattr_getpolicy_np(PointerByReference pthread_mutexattr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_getpolicy_np(const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:327</i>
	 */
	int pthread_mutexattr_getpolicy_np(PointerByReference pthread_mutexattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_init(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:331</i><br>
	 * @deprecated use the safer method {@link #pthread_mutexattr_init(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_init(Pointer pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_init(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:331</i>
	 */
	int pthread_mutexattr_init(PointerByReference pthread_mutexattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:334</i><br>
	 * @deprecated use the safer method {@link #pthread_mutexattr_setprioceiling(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_setprioceiling(Pointer pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:334</i>
	 */
	int pthread_mutexattr_setprioceiling(PointerByReference pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:337</i><br>
	 * @deprecated use the safer method {@link #pthread_mutexattr_setprotocol(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_setprotocol(Pointer pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:337</i>
	 */
	int pthread_mutexattr_setprotocol(PointerByReference pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:340</i><br>
	 * @deprecated use the safer method {@link #pthread_mutexattr_setpshared(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_setpshared(Pointer pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:340</i>
	 */
	int pthread_mutexattr_setpshared(PointerByReference pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_settype(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:343</i><br>
	 * @deprecated use the safer method {@link #pthread_mutexattr_settype(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_settype(Pointer pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_settype(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:343</i>
	 */
	int pthread_mutexattr_settype(PointerByReference pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setpolicy_np(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:346</i><br>
	 * @deprecated use the safer method {@link #pthread_mutexattr_setpolicy_np(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_setpolicy_np(Pointer pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_mutexattr_setpolicy_np(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:346</i>
	 */
	int pthread_mutexattr_setpolicy_np(PointerByReference pthread_mutexattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_once(pthread_once_t*, pthread_once_arg1_callback*)</code><br>
	 * <i>native declaration : pthread/pthread.h:350</i><br>
	 * @deprecated use the safer method {@link #pthread_once(com.sun.jna.ptr.PointerByReference, vavi.util.pthread.jna.pthread.PthreadLibrary.pthread_once_arg1_callback)} instead
	 */
	@Deprecated 
	int pthread_once(Pointer pthread_once_tPtr1, PthreadLibrary.pthread_once_arg1_callback arg1);
	/**
	 * Original signature : <code>int pthread_once(pthread_once_t*, pthread_once_arg1_callback*)</code><br>
	 * <i>native declaration : pthread/pthread.h:350</i>
	 */
	int pthread_once(PointerByReference pthread_once_tPtr1, PthreadLibrary.pthread_once_arg1_callback arg1);
	/**
	 * Original signature : <code>int pthread_rwlock_destroy(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:353</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlock_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlock_destroy(Pointer pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_destroy(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:353</i>
	 */
	int pthread_rwlock_destroy(PointerByReference pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_init(pthread_rwlock_t*, const pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:356</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlock_init(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlock_init(Pointer pthread_rwlock_tPtr1, Pointer pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_init(pthread_rwlock_t*, const pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:356</i>
	 */
	int pthread_rwlock_init(PointerByReference pthread_rwlock_tPtr1, PointerByReference pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_rdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:362</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlock_rdlock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlock_rdlock(Pointer pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_rdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:362</i>
	 */
	int pthread_rwlock_rdlock(PointerByReference pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_tryrdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:366</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlock_tryrdlock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlock_tryrdlock(Pointer pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_tryrdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:366</i>
	 */
	int pthread_rwlock_tryrdlock(PointerByReference pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_trywrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:370</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlock_trywrlock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlock_trywrlock(Pointer pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_trywrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:370</i>
	 */
	int pthread_rwlock_trywrlock(PointerByReference pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_wrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:374</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlock_wrlock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlock_wrlock(Pointer pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_wrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:374</i>
	 */
	int pthread_rwlock_wrlock(PointerByReference pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_unlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:378</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlock_unlock(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlock_unlock(Pointer pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlock_unlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:378</i>
	 */
	int pthread_rwlock_unlock(PointerByReference pthread_rwlock_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_destroy(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:381</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlockattr_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlockattr_destroy(Pointer pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_destroy(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:381</i>
	 */
	int pthread_rwlockattr_destroy(PointerByReference pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:384</i><br>
	 * @deprecated use the safer methods {@link #pthread_rwlockattr_getpshared(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #pthread_rwlockattr_getpshared(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlockattr_getpshared(Pointer pthread_rwlockattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:384</i>
	 */
	int pthread_rwlockattr_getpshared(PointerByReference pthread_rwlockattr_tPtr1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:384</i>
	 */
	int pthread_rwlockattr_getpshared(PointerByReference pthread_rwlockattr_tPtr1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_init(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:388</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlockattr_init(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlockattr_init(Pointer pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_init(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:388</i>
	 */
	int pthread_rwlockattr_init(PointerByReference pthread_rwlockattr_tPtr1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:391</i><br>
	 * @deprecated use the safer method {@link #pthread_rwlockattr_setpshared(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int pthread_rwlockattr_setpshared(Pointer pthread_rwlockattr_tPtr1, int int1);
	/**
	 * Original signature : <code>int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int)</code><br>
	 * <i>native declaration : pthread/pthread.h:391</i>
	 */
	int pthread_rwlockattr_setpshared(PointerByReference pthread_rwlockattr_tPtr1, int int1);
	/**
	 * Original signature : <code>pthread_t pthread_self()</code><br>
	 * <i>native declaration : pthread/pthread.h:394</i>
	 */
	PthreadLibrary.pthread_t pthread_self();
	/**
	 * Original signature : <code>int pthread_setcancelstate(int, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:398</i><br>
	 * @deprecated use the safer methods {@link #pthread_setcancelstate(int, java.nio.IntBuffer)} and {@link #pthread_setcancelstate(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_setcancelstate(int int1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_setcancelstate(int, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:398</i>
	 */
	int pthread_setcancelstate(int int1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_setcanceltype(int, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:403</i><br>
	 * @deprecated use the safer methods {@link #pthread_setcanceltype(int, java.nio.IntBuffer)} and {@link #pthread_setcanceltype(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_setcanceltype(int int1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int pthread_setcanceltype(int, int*)</code><br>
	 * <i>native declaration : pthread/pthread.h:403</i>
	 */
	int pthread_setcanceltype(int int1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int pthread_setconcurrency(int)</code><br>
	 * <i>native declaration : pthread/pthread.h:407</i>
	 */
	int pthread_setconcurrency(int int1);
	/**
	 * Original signature : <code>int pthread_setschedparam(int, sched_param*)</code><br>
	 * <i>native declaration : pthread/pthread.h:410</i>
	 */
	int pthread_setschedparam(int int1, sched_param sched_paramPtr1);
	/**
	 * Original signature : <code>int pthread_setspecific(const void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:414</i>
	 */
	int pthread_setspecific(Pointer voidPtr1);
	/**
	 * Original signature : <code>void pthread_testcancel()</code><br>
	 * <i>native declaration : pthread/pthread.h:418</i>
	 */
	void pthread_testcancel();
	/**
	 * returns non-zero if pthread_create or cthread_fork have been called<br>
	 * Original signature : <code>int pthread_is_threaded_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:424</i>
	 */
	int pthread_is_threaded_np();
	/**
	 * Original signature : <code>int pthread_threadid_np(__uint64_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:427</i><br>
	 * @deprecated use the safer methods {@link #pthread_threadid_np(java.nio.LongBuffer)} and {@link #pthread_threadid_np(com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int pthread_threadid_np(LongByReference __uint64_tPtr1);
	/**
	 * Original signature : <code>int pthread_threadid_np(__uint64_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:427</i>
	 */
	int pthread_threadid_np(LongBuffer __uint64_tPtr1);
	/**
	 * SPI to set and get pthread name<br>
	 * Original signature : <code>int pthread_getname_np(char*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:431</i><br>
	 * @deprecated use the safer methods {@link #pthread_getname_np(java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #pthread_getname_np(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int pthread_getname_np(Pointer charPtr1, NativeLong size_t1);
	/**
	 * SPI to set and get pthread name<br>
	 * Original signature : <code>int pthread_getname_np(char*, size_t)</code><br>
	 * <i>native declaration : pthread/pthread.h:431</i>
	 */
	int pthread_getname_np(ByteBuffer charPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>int pthread_setname_np(const char*)</code><br>
	 * <i>native declaration : pthread/pthread.h:435</i><br>
	 * @deprecated use the safer methods {@link #pthread_setname_np(java.lang.String)} and {@link #pthread_setname_np(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pthread_setname_np(Pointer charPtr1);
	/**
	 * Original signature : <code>int pthread_setname_np(const char*)</code><br>
	 * <i>native declaration : pthread/pthread.h:435</i>
	 */
	int pthread_setname_np(String charPtr1);
	/**
	 * returns non-zero if the current thread is the main thread<br>
	 * Original signature : <code>int pthread_main_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:439</i>
	 */
	int pthread_main_np();
	/**
	 * return the mach thread bound to the pthread<br>
	 * Original signature : <code>mach_port_t pthread_mach_thread_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:443</i>
	 */
	int pthread_mach_thread_np();
	/**
	 * Original signature : <code>size_t pthread_get_stacksize_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:446</i>
	 */
	NativeLong pthread_get_stacksize_np();
	/**
	 * Original signature : <code>void* pthread_get_stackaddr_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:449</i>
	 */
	Pointer pthread_get_stackaddr_np();
	/**
	 * Like pthread_cond_signal(), but only wake up the specified pthread<br>
	 * Original signature : <code>int pthread_cond_signal_thread_np(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:453</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_signal_thread_np(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pthread_cond_signal_thread_np(Pointer pthread_cond_tPtr1);
	/**
	 * Like pthread_cond_signal(), but only wake up the specified pthread<br>
	 * Original signature : <code>int pthread_cond_signal_thread_np(pthread_cond_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:453</i>
	 */
	int pthread_cond_signal_thread_np(PointerByReference pthread_cond_tPtr1);
	/**
	 * Like pthread_cond_timedwait, but use a relative timeout<br>
	 * Original signature : <code>int pthread_cond_timedwait_relative_np(pthread_cond_t*, pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : pthread/pthread.h:458</i><br>
	 * @deprecated use the safer method {@link #pthread_cond_timedwait_relative_np(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, vavi.util.pthread.jna.pthread.PthreadLibrary.timespec)} instead
	 */
	@Deprecated 
	int pthread_cond_timedwait_relative_np(Pointer pthread_cond_tPtr1, Pointer pthread_mutex_tPtr1, PthreadLibrary.timespec timespecPtr1);
	/**
	 * Like pthread_cond_timedwait, but use a relative timeout<br>
	 * Original signature : <code>int pthread_cond_timedwait_relative_np(pthread_cond_t*, pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : pthread/pthread.h:458</i>
	 */
	int pthread_cond_timedwait_relative_np(PointerByReference pthread_cond_tPtr1, PointerByReference pthread_mutex_tPtr1, PthreadLibrary.timespec timespecPtr1);
	/**
	 * Like pthread_create(), but leaves the thread suspended<br>
	 * Original signature : <code>int pthread_create_suspended_np(pthread_t*, const pthread_attr_t*, pthread_create_suspended_np_arg1_callback*, void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:464</i><br>
	 * @deprecated use the safer method {@link #pthread_create_suspended_np(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, vavi.util.pthread.jna.pthread.PthreadLibrary.pthread_create_suspended_np_arg1_callback, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pthread_create_suspended_np(Pointer pthread_tPtr1, Pointer pthread_attr_tPtr1, PthreadLibrary.pthread_create_suspended_np_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Like pthread_create(), but leaves the thread suspended<br>
	 * Original signature : <code>int pthread_create_suspended_np(pthread_t*, const pthread_attr_t*, pthread_create_suspended_np_arg1_callback*, void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:464</i>
	 */
	int pthread_create_suspended_np(PointerByReference pthread_tPtr1, PointerByReference pthread_attr_tPtr1, PthreadLibrary.pthread_create_suspended_np_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Original signature : <code>int pthread_kill(int)</code><br>
	 * <i>native declaration : pthread/pthread.h:473</i>
	 */
	int pthread_kill(int int1);
	/**
	 * Original signature : <code>pthread_t pthread_from_mach_thread_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:476</i>
	 */
	PthreadLibrary.pthread_t pthread_from_mach_thread_np();
	/**
	 * Original signature : <code>int pthread_sigmask(int, const sigset_t*, sigset_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:479</i><br>
	 * @deprecated use the safer methods {@link #pthread_sigmask(int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #pthread_sigmask(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_sigmask(int int1, IntByReference sigset_tPtr1, IntByReference sigset_tPtr2);
	/**
	 * Original signature : <code>int pthread_sigmask(int, const sigset_t*, sigset_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:479</i>
	 */
	int pthread_sigmask(int int1, IntBuffer sigset_tPtr1, IntBuffer sigset_tPtr2);
	/**
	 * Original signature : <code>void pthread_yield_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:484</i>
	 */
	void pthread_yield_np();
	/**
	 * Original signature : <code>void pthread_jit_write_protect_np(int)</code><br>
	 * <i>native declaration : pthread/pthread.h:488</i>
	 */
	void pthread_jit_write_protect_np(int enabled);
	/**
	 * Original signature : <code>int pthread_jit_write_protect_supported_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:492</i>
	 */
	int pthread_jit_write_protect_supported_np();
	/**
	 * @function pthread_jit_write_with_callback_np<br>
	 * @abstract<br>
	 * Toggles per-thread write-protection of the MAP_JIT region to writeable,<br>
	 * invokes an allowed callback function to write to it, and toggles protection<br>
	 * back to executable.<br>
	 * @param callback<br>
	 * The callback function to invoke to write to the MAP_JIT region.  It must be<br>
	 * statically allowed using PTHREAD_JIT_WRITE_ALLOW_CALLBACKS_NP.<br>
	 * @param ctx<br>
	 * Context to pass through to the invocation of the callback function.<br>
	 * @result<br>
	 * The result code returned by the callback function.<br>
	 * @discussion<br>
	 * This function assumes that the MAP_JIT region has executable protection when<br>
	 * called.  It is therefore invalid to call it recursively from within a write<br>
	 * callback.  The implementation does not detect such invalid recursive calls,<br>
	 * so the client is responsible for preventing them.<br>
	 * Callbacks _must not_ perform any non-local transfer of control flow (e.g.<br>
	 * throw an exception, longjmp(3)), as doing so would leave the MAP_JIT region<br>
	 * writeable.<br>
	 * On systems where pthread_jit_write_protect_supported_np(3) is false, this<br>
	 * function calls @callback directly and does nothing else.<br>
	 * This function only enforces that @callback is allowed if the caller has the<br>
	 * com.apple.security.cs.jit-write-allowlist entitlement.  That entitlement also<br>
	 * disallows use of pthread_jit_write_protect_np(3).  Adopting the entitlement<br>
	 * is therefore crucial in realizing the security benefits of this interface.<br>
	 * If the entitlement is not present then this function toggles protection of<br>
	 * the MAP_JIT to writeable, calls @callback and then toggles protection back to<br>
	 * executable, without validating that @callback is an allowed function.  This<br>
	 * behavior is intended to permit independent adoption of this interface by<br>
	 * libraries - once all libraries in an application have adopted, the<br>
	 * application should add the entitlement.<br>
	 * By default, only callbacks in libraries/images present at process start-up<br>
	 * are allowed - callbacks in images loaded dynamically via dlopen(3)/etc. are<br>
	 * not permitted.  However, if the additional entitlement<br>
	 * com.apple.security.cs.jit-write-allowlist-freeze-late is _also_ present, any<br>
	 * callbacks in dlopen'd libraries are also added to the set of allowed<br>
	 * callbacks until the {@link #pthread_jit_write_freeze_callbacks_np} function is<br>
	 * called.<br>
	 * The goal of this interface is to allow applications that execute JIT-compiled<br>
	 * code to mitigate against attempts from attackers to escalate to code<br>
	 * execution by getting their own instructions written to the MAP_JIT region.<br>
	 * Callbacks should assume an attacker can control the input to this function.<br>
	 * They must therefore carefully validate the data that they are passed and do<br>
	 * so using as little attackable state as possible. This means simplifying<br>
	 * control flow and avoiding spills of sensitive registers (e.g. those used for<br>
	 * validation or control flow).<br>
	 * In the event a callback detects that its input is invalid, it should either<br>
	 * abort in the simplest fashion possible (preferring e.g. __builtin_trap() over<br>
	 * abort(3), the latter being encumbered by various conformance requirements) or<br>
	 * return a result indicating failure.<br>
	 * Original signature : <code>int pthread_jit_write_with_callback_np(pthread_jit_write_callback_t, void*)</code><br>
	 * <i>native declaration : pthread/pthread.h:597</i>
	 */
	int pthread_jit_write_with_callback_np(PthreadLibrary.pthread_jit_write_callback_t callback, Pointer ctx);
	/**
	 * @function pthread_jit_write_freeze_callbacks_np<br>
	 * @abstract<br>
	 * Freezes the set of allowed pthread JIT write callbacks, preventing any<br>
	 * callbacks in subsequently dlopen'd libraries from being allowed as arguments<br>
	 * to {@link #pthread_jit_write_with_callback_np}<br>
	 * @discussion<br>
	 * If the com.apple.security.cs.jit-write-allowlist-freeze-late entitlement is<br>
	 * present, this function must be called exactly once after all libraries<br>
	 * containing JIT write callbacks have been loaded to prevent any further<br>
	 * runtime modifications to the set of allowed callbacks.  Failing to call this<br>
	 * function before calling pthread_jit_write_with_callback_np(3) for the first<br>
	 * time is an error, as is calling it multiple times.<br>
	 * If the jit-write-allowlist-freeze-late entitlement is not present, calling<br>
	 * this function is an error.<br>
	 * If an application does not need to dlopen(3) any libraries or frameworks<br>
	 * containing needed JIT write callbacks, it is best to avoid the<br>
	 * jit-write-allowlist-freeze-late entitlement and accompanying need to call<br>
	 * this function, as this allows the runtime to automatically freeze the set of<br>
	 * allowed callbacks early in process initialization.<br>
	 * Original signature : <code>void pthread_jit_write_freeze_callbacks_np()</code><br>
	 * <i>native declaration : pthread/pthread.h:627</i>
	 */
	void pthread_jit_write_freeze_callbacks_np();
	/**
	 * @function pthread_cpu_number_np<br>
	 * @param cpu_number_out<br>
	 * The CPU number that the thread was running on at the time of query.<br>
	 * This cpu number is in the interval [0, ncpus) (from sysctlbyname("hw.ncpu"))<br>
	 * @result<br>
	 * This function returns 0 or the value of errno if an error occurred.<br>
	 * @note<br>
	 * Optimizations of per-CPU datastructures based on the result of this function<br>
	 * still require synchronization since it is not guaranteed that the thread will<br>
	 * still be on the same CPU by the time the function returns.<br>
	 * Original signature : <code>int pthread_cpu_number_np(size_t*)</code><br>
	 * <i>native declaration : pthread/pthread.h:645</i>
	 */
	int pthread_cpu_number_np(NativeLongByReference cpu_number_out);
	class pthread_mutex_t extends PointerType {
		public pthread_mutex_t(Pointer address) {
			super(address);
		}
		public pthread_mutex_t() {
			super();
		}
	}

    class pthread_condattr_t extends PointerType {
		public pthread_condattr_t(Pointer address) {
			super(address);
		}
		public pthread_condattr_t() {
			super();
		}
	}

    class timespec extends PointerType {
		public timespec(Pointer address) {
			super(address);
		}
		public timespec() {
			super();
		}
	}

    class pthread_mutexattr_t extends PointerType {
		public pthread_mutexattr_t(Pointer address) {
			super(address);
		}
		public pthread_mutexattr_t() {
			super();
		}
	}

    class pthread_once_t extends PointerType {
		public pthread_once_t(Pointer address) {
			super(address);
		}
		public pthread_once_t() {
			super();
		}
	}

    class pthread_rwlockattr_t extends PointerType {
		public pthread_rwlockattr_t(Pointer address) {
			super(address);
		}
		public pthread_rwlockattr_t() {
			super();
		}
	}

    class pthread_t extends PointerType {
		public pthread_t(Pointer address) {
			super(address);
		}
		public pthread_t() {
			super();
		}
	}

    class pthread_cond_t extends PointerType {
		public pthread_cond_t(Pointer address) {
			super(address);
		}
		public pthread_cond_t() {
			super();
		}
	}

    class pthread_attr_t extends PointerType {
		public pthread_attr_t(Pointer address) {
			super(address);
		}
		public pthread_attr_t() {
			super();
		}
	}

    class pthread_override_t extends PointerType {
		public pthread_override_t(Pointer address) {
			super(address);
		}
		public pthread_override_t() {
			super();
		}
	}

    class pthread_rwlock_t extends PointerType {
		public pthread_rwlock_t(Pointer address) {
			super(address);
		}
		public pthread_rwlock_t() {
			super();
		}
	}
}
